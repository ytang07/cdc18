}
}
for (i in uclaaway$Team.Result){
if (i == "Loss"){
uclawins = uclawins + 1
}
}
uclaperc = uclawins/32
t.test(wl, alternative = "l", mu = uclaperc, conf.level = .95)
t.test(vec, alternative = "l", mu = uclaperc, conf.level = .95)
View(uclaaway)
View(uclaaway)
t.test(vec, alternative = "l", mu = uclaperc, conf.level = .95)
homewl_ = b2[b2$Team.Location = "Home", "Team.Result"]
awaywl_ = b2[b2$Team.Location = "Away", "Team.Result"]
homewl_ = b2[b2$Team.Location == "Home", "Team.Result"]
awaywl_ = b2[b2$Team.Location == "Away", "Team.Result"]
awaywl_
awaywl_ -1
remove(homewl_, awaywl_)
homewl = b2[b2$Team.Location == "Home", "Team.Result"]
awaywl = b2[b2$Team.Location == "Away", "Team.Result"]
mean(homewl)_
mean(homewl)
mean(factors(homewl))
mean(as.factor(homewl))
mean(as.factors(homewl))
mean(contrasts(as.factor(homewl)))
mean(contrasts(as.factor(awaywl)))
homewl_ = b2[b2$Team.Location == "Home", "Team.Result"]
awaywl_ = b2[b2$Team.Location == "Away", "Team.Result"]
for (i in homewl_){}
for (i in homewl_){
}
homewl = numeric()
awaywl = numeric()
for (i in homewl_){
if (homewl_ == "Win"){}
}
for (i in homewl_){
if (homewl_ == "Win"){
homewl = c(homewl, 1)
}
}
for (i in homewl_){
if (i == "Win"){
homewl = c(homewl, 1)
}
}
for (i in homewl_){
if (i == "Win"){
homewl = c(homewl, 1)
}
if (i == "Loss"){
homewl = c(homewl, 0)
}
}
for (i in awaywl_){
if (i == "Win"){
awaywl = c(awaywl, 1)
}
if(i == "Loss"){
awaywl = c(awaywl, 0)
}
}
length(awaywl_)
length(homewl_)
remove(homewl)
for (i in awaywl_){
if (i == "Win"){
awaywl = c(awaywl, 1)
}
if(i == "Loss"){
awaywl = c(awaywl, 0)
}
}
remove(awaywl)
for (i in awaywl_){
if (i == "Win"){
awaywl = c(awaywl, 1)
}
if(i == "Loss"){
awaywl = c(awaywl, 0)
}
}
awawl = numeric()
awaywl= numeric()
homewl = numeric()
remove(awawl)
for (i in awaywl_){
if (i == "Win"){
awaywl = c(awaywl, 1)
}
if(i == "Loss"){
awaywl = c(awaywl, 0)
}
}
for (i in homewl_){
if (i == "Win"){
homewl = c(homewl, 1)
}
if (i == "Loss"){
homewl = c(homewl, 0)
}
}
t.test(homewl, alternative = "l", mu = mean(awaywl), conf.leve = .99)
remove(all)
remove()
rm -rf
?rm
rm(list=ls())
tuition = read.csv("http://kbodwin.web.unc.edu/files/2016/09/tuition_final.csv")
open(tuition)
summary(tuition)
View(tuition)
View(tuition)
tuition$Acc.Rate <- (tuition$Accepted/tuition$Applied)
unc = tuition[Name = "University of North Carolina at Chapel Hill",]
unc = tuition[tuition$Name = "University of North Carolina at Chapel Hill",]
unc = tuition[tuition$Name == "University of North Carolina at Chapel Hill",]
tuition[tuition$Name == "University of North Carolina at Chapel Hill",]
?plot
?abline
abline(1,2)
plot(tuition$Avg.SAT, tuition$Out.Tuition, main = "title", xlab = "Average SAT", ylab = "Tuition", col = "blue")
abline(0,10)
tuition_nona <- na.omit(tuition)
remove(tuition_nona)
na_t <- na.omit(tuition[,tuition$Out.Tuition])
na_t <- na.omit(tuition[tuition$Out.Tuition])
na_t <- na.omit(tuition[,tuition$Out.Tuition])
na_t <- na.omit(tuition[,"tuition$Out.Tuition"])
na_t <- na.omit(tuition[,c("tuition$Out.Tuition"]))
na_t <- na.omit(tuition[,c("tuition$Out.Tuition")])
na_t <- na.omit(tuition[,c("Out.Tuition")])
na_t <- na.omit(tuition[,c("Out.Tuition")])
na_sat <- na.omit(tuition[,c("Avg.SAT")])
mu_t <- mean(na_t)
mu_say <- mean(na_sat)
rm(mu_say)
na_t <- na.omit(tuition[,c("Out.Tuition")])
na_sat <- na.omit(tuition[,c("Avg.SAT")])
mu_t <- mean(na_t)
mu_sat <- mean(na_sat)
sat_from_t = as.data.frame(tuition[,c("Out.Tuition", "Avg.SAT")])
?mean
r <- cor(sat_from_t, method="pearson")
view(r)
summary(r)
View(r)
View(r)
View(sat_from_t)
View(sat_from_t)
r <- cor(sat_from_t, method="pearson", use="pairwise.complete.obs")
View(r)
View(r)
sat_from_t = as.data.frame(tuition[,c("Avg.SAT", "Out.Tuition")])
mu_x = mean(sat_from_t$Avg.SAT, na.rm = TRUE)
mu_y = mean(sat_from_t$Out.Tuition, na.rm = TRUE)
rm(mu_t, mu_sat, na_sat, na_t)
ss = function(df1, mu){
val = 0
for (i in df1){
p = (i-mu)^2
}
}
ss = function(df1, mu){
val = 0
for (i in df1){
p = (i-mu)^2
val = val + p
}
return val
}
ss = function(df1, mu){
val = 0
for (i in df1){
p = (i-mu)^2
val = val + p
}
return (val)
}
ss(x, mean(x, na.rm=TRUE))
x <- sat_from_t$Avg.SAT
ss = function(df1, mu){
val = 0
for (i in df1){
p = (i-mu)^2
val = val + p
}
return (val)
}
ss = function(df1, mu){
val = 0
for (i in df1){
if (!is.na(i)){
p = (i-mu)^2
val = val + p
}
}
return (val)
}
ss(x, mean(x,na.rm=TRUE))
1302*967^2
y <- sat_from_t$Out.Tuition
Sx = sum((x-mu_x)^2, na.rm = TRUE)
Sy = sum((y-mu_y)^2, na.rm = TRUE)
beta1 = function(r, Sy, Sx){
if (Sx != 0){
b1 = r*Sy/Sx
}
else{
return("divide by 0 error")
}
return(b1)
}
beta2 = function(y_bar, x_bar, r, Sy, Sx){
b0 = y_bar-beta1(r, Sy, Sx)*x_bar
return (b0)
}
rm(x, y)
xs = as.data.frame(tuition$Avg.SAT)
ys = as.data.frame(tuition$Out.Tuition)
mu_x = mean(xs$Avg.SAT, na.rm = TRUE)
mu_y = mean(ys$Out.Tuition, na.rm = TRUE)
r = cor(sat_from_t, method="pearson", use="pairwise.complete.obs")
Sx = sum((x-mu_x)^2, na.rm = TRUE)
Sy = sum((y-mu_y)^2, na.rm = TRUE)
b1 = beta1(r, Sy, Sx)
b0 = beta0(mu_y, mu_x, r, Sy, Sx)
plot.new
plot(x, y, main="Avg SAT vs Tuition", xlab = "Avg SAT", ylab = "Tuition", col = blue)
abline(b0+b1*x)
b1 = beta1(r, Sy, Sx)
b2 = beta2(mu_y, mu_x, r, Sy, Sx)
plot.new
plot(x, y, main="Avg SAT vs Tuition", xlab = "Avg SAT", ylab = "Tuition", col = blue)
abline(b2+b1*x)
b1 = beta1(r, Sy, Sx)
b2 = beta2(mu_y, mu_x, r, Sy, Sx)
plot.new
plot(x, y, main="Avg SAT vs Tuition", xlab = "Avg SAT", ylab = "Tuition", col = blue)
abline(b2+b1*xs)
plot.new
plot(xs, ys, main="Avg SAT vs Tuition", xlab = "Avg SAT", ylab = "Tuition", col = blue)
abline(b2+b1*xs)
plot.new
plot(xs, ys, main="Avg SAT vs Tuition", xlab = "Avg SAT", ylab = "Tuition", col = blue)
abline(b2+b1*xs)
plot.new
plot(xs, ys, main="Avg SAT vs Tuition", xlab = "Avg SAT", ylab = "Tuition", col = blue, na.rm=TRUE)
abline(b2+b1*xs)
plot.new
plot(!is.na(xs), !is.na(ys), main="Avg SAT vs Tuition", xlab = "Avg SAT", ylab = "Tuition", col = blue)
abline(b2+b1*!is.na(xs))
plot.new
plot(!is.na(xs), !is.na(ys), main="Avg SAT vs Tuition", xlab = "Avg SAT", ylab = "Tuition", col = blue)
abline(b2+b1*!is.na(xs))
xy = c(xs, ys)
View(xy)
View(xy)
rm(xy)
rm(ss)
xy = tuition[complete.cases(c("Avg.SAT", "Out.Tuition"))]
View(xy)
View(xy)
xy = tuition[complete.cases(c("Avg.SAT", "Out.Tuition")),]
?complete.cases
xy = complete.cases(xs, ys)
xy = c(xs[complete.cases(xs,ys)], ys[complete.cases(xs,ys)])
xy = c(xs[complete.cases(xs,ys),], ys[complete.cases(xs,ys),])
xy = as.table(setNames(xs[complete.cases(xs,ys),], ys[complete.cases(xs,ys),]))
xy = as.data.frame(xs[complete.cases(xs,ys),], ys[complete.cases(xs,ys),])
View(xy)
View(xy)
xy = as.data.frame(setNames(xs[complete.cases(xs,ys),], ys[complete.cases(xs,ys),]))
rm(xy)
plot(xs, ys)
plot(xs$`tuition$Avg.SAT`, ys$`tuition$Out.Tuition`)
plot.new
plot(xs$`tuition$Avg.SAT`, ys$`tuition$Out.Tuition`, main="Avg SAT vs Tuition", xlab = "Avg SAT", ylab = "Tuition", col = "blue")
abline(b2+b1*xs)
abline(b2, b1*xs)
abline(b2, b1)
b2 = beta2(mu_y, mu_x, r[1,1], Sy, Sx)
abline(b2, b1)
b2
View(beta1)
b1 = beta1(r, Sy, Sx)
b1 = beta1(r[1,1], Sy, Sx)
r = cor(sat_from_t, method="pearson", use="pairwise.complete.obs")[1,1]
r = cor(sat_from_t, method="pearson", use="pairwise.complete.obs")[2,1]
b1 = beta1(r, Sy, Sx)
b2 = beta2(mu_y, mu_x, r, Sy, Sx)
abline(b2,b1)
View(beta2)
View(beta2)
View(xs)
mu_x = mean(xs$`tuition$Avg.SAT`, na.rm = TRUE)
mu_y = mean(ys$`tuition$Out.Tuition`, na.rm = TRUE)
b2 = beta2(mu_y, mu_x, r, Sy, Sx)
abline(b2,b1)
abline(b1,b2)
plot.new
plot(xs$`tuition$Avg.SAT`, ys$`tuition$Out.Tuition`, main="Avg SAT vs Tuition", xlab = "Avg SAT", ylab = "Tuition", col = "blue")
abline(b1,b2)
Sx = sqrt(sum((x-mu_x)^2, na.rm = TRUE))
Sy = sqrt(sum((y-mu_y)^2, na.rm = TRUE))
b1 = beta1(r, Sy, Sx)
b2 = beta2(mu_y, mu_x, r, Sy, Sx)
plot.new
plot(xs$`tuition$Avg.SAT`, ys$`tuition$Out.Tuition`, main="Avg SAT vs Tuition", xlab = "Avg SAT", ylab = "Tuition", col = "blue")
abline(b2,b1)
Sx = sqrt(sum((xs-mu_x)^2, na.rm = TRUE))
Sy = sqrt(sum((ys-mu_y)^2, na.rm = TRUE))
b1 = beta1(r, Sy, Sx)
b2 = beta2(mu_y, mu_x, r, Sy, Sx)
plot.new
plot(xs$`tuition$Avg.SAT`, ys$`tuition$Out.Tuition`, main="Avg SAT vs Tuition", xlab = "Avg SAT", ylab = "Tuition", col = "blue")
abline(b2,b1)
r = cor(xs$`tuition$Avg.SAT`, ys$`tuition$Out.Tuition`, method="pearson", use="pairwise.complete.obs")[2,1]
r = cor(xs$`tuition$Avg.SAT`, ys$`tuition$Out.Tuition`, method="pearson", use="pairwise.complete.obs")
predict_yval <- function(X, Y, x_new){
mu_x = mean(x, na.rm = TRUE)
mu_y = mean(y, na.rm = TRUE)
r = cor(x, y, method = "pearson", use="pairwise.complete.obs")
Sx = sqrt(sum((x-mu_x)^2, na.rm = TRUE))
Sy = sqrt(sum((y-mu_y)^2, na.rm = TRUE))
b1 = beta1(r, Sy, Sx)
b2 = beta2(mu_y, mu_x, r, Sy, Sx)
y_new = b2 + b1 * x_new
return(y_new)
}
predict_yval(sat_from_t$Avg.SAT, sat_from_t$Out.Tuition, 972)
predict_yval <- function(X, Y, x_new){
mu_x = mean(X, na.rm = TRUE)
mu_y = mean(Y, na.rm = TRUE)
r = cor(X, Y, method = "pearson", use="pairwise.complete.obs")
Sx = sqrt(sum((X-mu_x)^2, na.rm = TRUE))
Sy = sqrt(sum((Y-mu_y)^2, na.rm = TRUE))
b1 = beta1(r, Sy, Sx)
b2 = beta2(mu_y, mu_x, r, Sy, Sx)
y_new = b2 + b1 * x_new
return(y_new)
}
predict_yval(sat_from_t$Avg.SAT, sat_from_t$Out.Tuition, 972)
predict_yval(sat_from_t$Avg.SAT, sat_from_t$Out.Tuition, 881)
predict_yval(sat_from_t$Avg.SAT, sat_from_t$Out.Tuition, 990)
predict_yval(sat_from_t$Avg.SAT, sat_from_t$Out.Tuition, 1280)
predict_yval(sat_from_t$Avg.SAT, sat_from_t$Out.Tuition, 600)
predict_yval(sat_from_t$Avg.SAT, sat_from_t$Out.Tuition, 800)
predict_yval(sat_from_t$Avg.SAT, sat_from_t$Out.Tuition, 1000)
duke <- tuition[tuition$Name == "Duke University",]
unc_sat = unc$Avg.SAT
duke_sat = duke$Avg.SAT
unc_sat = unc[Avg.SAT,1]
duke_sat = duke[Avg.SAT,1]
unc_sat = unc["Avg.SAT",1]
duke_sat = duke["Avg.SAT",1]
unc_sat = unc$Avg.SAT[1]
duke_sat = duke$Avg.SAT[1]
predict_yval(xs, ys, unc_sat)
predict_yval(xs$`tuition$Avg.SAT`, ys$`tuition$Out.Tuition`, unc_sat)
unc_t_pred = predict_yval(xs$`tuition$Avg.SAT`, ys$`tuition$Out.Tuition`, unc_sat)
duke_t_pred = predict_yval(xs$`tuition$Avg.SAT`, ys$`tuition$Out.Tuition`, duke_sat)
unc_t_pred
unc$Out.Tuition[1]
duke_t_pred
duke$Out.Tuition[1]
rm(list = ls())
setwd("./Fall_18/CDC18")
ls()
setwd("./Basketball/")
read.csv("Historical NBA Performance.csv")
historical <- read.csv("Historical NBA Performance.csv")
all_star <- read.csv("NBA All Star Games.csv")
shots <- read.csv("NBA_Shots_2000_to_2018.csv")
cont <- read.csv("Team Continuity.csv")
summary(shots)
summary(shots$Top.px...Location.)
summary(shots$Left.px...location.)
summary(shots$Top.px...Location.)
summary(strtoi(shots$Top.px...Location.))
tops <- strtoi(shots$Top.px...Location.)
left <- shots$Left.px...location.
rm(tops, left)
View(shots)
unique(shots$Player)
View(all_star)
unique(player)
unique(all_star$Player)
a <- table(all_star$Player)
a
a[a(value) > 1]
a[values(a) > 1]
a[value(a) > 1]
names(a)
values(a)
?table
a[a > 1]
unique(a[a > 1])
count(a[a > 1])
oneplus <- a[a > 1]
one <- a[a == 1]
one
summary(oneplus)
fiveplus <- oneplus[oneplus > 5]
one_to_five <- oneplus[oneplus < 5]
one_to_five <- oneplus[oneplus <= 5]
rm(oneplus)
one_to_four <- a[a > 1 & a <=4]
rm(one_to_five)
fiveplus <- a[a >= 5]
ft <- shots[strtoi(shots$Top.px...Location.) == 50 & shots$Left.px...location. == 240 & shots$Shot_Distance.ft. == 15,]
View(ft)
rm(ft)
ft <- shots[strtoi(shots$Top.px...Location.) == 50 & shots$Left.px...location. == 240,]
View(ft)
ft <- shots[strtoi(shots$Shot_Distance.ft. == 15 & shots$Left.px...location. == 240,]
ft <- shots[shots$Shot_Distance.ft. == 15 & shots$Left.px...location. == 240,]
View(ft)
View(ft)
ft <- shots[shots$Shot_Distance.ft. == 15 & shots$Left.px...location. >= 230 & shots$Left.px...location. <= 250,]
summary(shots$Left.px...location.)
a <- shots[shots$Left.px...location. < 0]
a <- shots[shots$Left.px...location. < 0,]
View(a)
View(a)
summary(strtoi(shots$Top.px...Location.))
nv <- names(one)
summary(shots$Game_Clock)
summary(strtoi(shots$Game_Clock))
summary(strtoi(shots$Top.px...Location.))
rm(a)
summary(shots$Left.px...location.)
mid3 <- shots[shots$Left.px...location. >= 160 & shots$Left.px...location. <= 320 & shots$Shot_Value == 3,]
left3 <- shots[shots$Left.px...location. < 160 & shots$Shot_Value == 3,]
left3 <- shots[shots$Left.px...location. > 320 & shots$Shot_Value == 3,]
left3 <- shots[shots$Left.px...location. < 160 & shots$Shot_Value == 3,]
right3 <- shots[shots$Left.px...location. > 320 & shots$Shot_Value == 3,]
left2 <- shots[shots$Left.px...location. < 160 & shots$Shot_Value == 2,]
right2 <- shots[shots$Left.px...location. > 320 & shots$Shot_Value == 2,]
mid2 <- shots[shots$Left.px...location. >= 160 & shots$Left.px...location. <= 320 & shots$Shot_Value == 2,]
onv <- nv
tnv <- names(one_to_four)
mnv <- names(fiveplus)
left2_1app <- left2[left2$Player %in% onv]
left2_1app <- left2[left2$Player %in% onv,]
left2_4app <- left2[left2$Player %in% tnv,]
left2_5app <- left2[left2$Player %in% mnv,]
left3_1app <- left3[left3$Player %in% onv,]
left3_4app <- left3[left3$Player %in% tnv,]
left3_5app <- left3[left3$Player %in% mnv,]
mid2_1app <- mid2[mid2$Player %in% onv,]
mid2_4app <- mid2[mid2$Player %in% tnv,]
mid2_5app <- mid2[mid2$Player %in% mnv,]
mid3_1app <- mid3[mid3$Player %in% onv,]
mid3_4app <- mid3[mid3$Player %in% tnv,]
mid3_5app <- mid3[mid3$Player %in% mnv,]
right2_1app <- right2[right2$Player %in% onv,]
right2_4app <- right2[right2$Player %in% tnv,]
right2_5app <- right2[right2$Player %in% mnv,]
right3_1app <- right3[right3$Player %in% onv,]
right3_4app <- right3[right3$Player %in% tnv,]
right3_5app <- right3[right3$Player %in% mnv,]
write.csv(right3_1app, "right3_1app.csv")
write.csv(right2_1app, "right2_1app.csv")
write.csv(right3_4app, "right3_4app.csv")
write.csv(right2_4app, "right2_4app.csv")
write.csv(right3_5app, "right3_5app.csv")
write.csv(right2_5app, "right2_5app.csv")
write.csv(left3_1app, "left3_1app.csv")
write.csv(left2_1app, "left2_1app.csv")
write.csv(left3_4app, "left3_4app.csv")
write.csv(left2_4app, "left2_4app.csv")
write.csv(left3_5app, "left3_5app.csv")
write.csv(left2_5app, "left2_5app.csv")
write.csv(mid3_1app, "mid3_1app.csv")
write.csv(mid2_1app, "mid2_1app.csv")
write.csv(mid3_4app, "mid3_4app.csv")
write.csv(mid2_4app, "mid2_4app.csv")
write.csv(mid3_5app, "mid3_5app.csv")
write.csv(mid2_5app, "mid2_5app.csv")
View(left2_5app)
View(left2_5app)
one_twos_scorediff = left2_1app[c(left2_1app$Outcome..1.if.made..0.otherwise., left2_1app$Team_Score, left2_1app$Opponent_Score,]
one_twos_scorediff = left2_1app[c(left2_1app$Outcome..1.if.made..0.otherwise., left2_1app$Team_Score, left2_1app$Opponent_Score),]
View(one_twos_scorediff)
one_twos_scorediff = left2_1app[c("Outcome..1.if.made..0.otherwise.", "Team_Score", "Opponent_Score"),]
subset
one_twos_scorediff <- subset(left2_1app, select=c("Outcome..1.if.made..0.otherwise.", "Team_Score", "Opponent_Score"))
two_twos_scorediff <- subset(left2_4app, select=c("Outcome..1.if.made..0.otherwise.", "Team_Score", "Opponent_Score"))
three_twos_scorediff <- subset(left2_5app, select=c("Outcome..1.if.made..0.otherwise.", "Team_Score", "Opponent_Score"))
one_left2_scorediff <- one_twos_scorediff
four_left2_scorediff <- two_twos_scorediff
five_left2_scorediff <- three_twos_scorediff
one_right2_scorediff <- subset(right2_1app, select=c("Outcome..1.if.made..0.otherwise.", "Team_Score", "Opponent_Score"))
four_right2_scorediff <- subset(right4_1app, select=c("Outcome..1.if.made..0.otherwise.", "Team_Score", "Opponent_Score"))
four_right2_scorediff <- subset(right2_4app, select=c("Outcome..1.if.made..0.otherwise.", "Team_Score", "Opponent_Score"))
five_right2_scorediff <- subset(right2_5app, select=c("Outcome..1.if.made..0.otherwise.", "Team_Score", "Opponent_Score"))
one_mid2_scorediff <- subset(mid2_1app, select=c("Outcome..1.if.made..0.otherwise.", "Team_Score", "Opponent_Score"))
four_mid2_scorediff <- subset(mid2_4app, select=c("Outcome..1.if.made..0.otherwise.", "Team_Score", "Opponent_Score"))
five_mid2_scorediff <- subset(mid2_5app, select=c("Outcome..1.if.made..0.otherwise.", "Team_Score", "Opponent_Score"))
write.csv(one_left2_scorediff, "one_left2_scorediff.csv")
write.csv(four_left2_scorediff, "four_left2_scorediff.csv")
write.csv(five_left2_scorediff, "five_left2_scorediff.csv")
write.csv(one_right2_scorediff, "one_right2_scorediff.csv")
write.csv(four_right2_scorediff, "four_right2_scorediff.csv")
write.csv(five_right2_scorediff, "five_right2_scorediff.csv")
write.csv(one_mid2_scorediff, "one_mid2_scorediff.csv")
write.csv(four_mid2_scorediff, "four_mid2_scorediff.csv")
write.csv(five_mid2_scorediff, "five_mid2_scorediff.csv")
